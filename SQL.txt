CREATE DATABASE TTPetShop
go
USE TTPetShop
go


CREATE TABLE Category (
	categoryID VARCHAR(255) PRIMARY KEY ,
	nameCat Nvarchar(255)

)
GO
INSERT INTO dbo.Category
(
    categoryID,
    nameCat
)
VALUES
(   'chuong-cho-thu-cung', -- categoryID - int
    N'Chuồng cho thú cưng' -- nameCat - varchar(255)
    )

INSERT INTO dbo.Category
(
    categoryID,
    nameCat
)
VALUES
(   'do-choi-cho-thu-cung', -- categoryID - int
    N'Đồ chơi cho thú cưng' -- nameCat - varchar(255)
    )
INSERT INTO dbo.Category
(
    categoryID,
    nameCat
)
VALUES
(   'phu-kien-cho-thu-cung', -- categoryID - int
    N'Phụ kiện cho thú cưng' -- nameCat - varchar(255)
    )

INSERT INTO dbo.Category
(
    categoryID,
    nameCat
)
VALUES
(   'thuc-an-cho-thu-cung', -- categoryID - int
    N'Thức ăn cho thú cưng' -- nameCat - varchar(255)
    )

INSERT INTO dbo.Category
(
    categoryID,
    nameCat
)
VALUES
(   'thuoc-cho-thu-cung', -- categoryID - int
    N'Thuốc cho thú cưng' -- nameCat - varchar(255)
    )

INSERT INTO dbo.Category
(
    categoryID,
    nameCat
)
VALUES
(   'thoi-trang-cho-thu-cung', -- categoryID - int
    N'Thời trang cho thú cưng' -- nameCat - varchar(255)
    )

GO
CREATE TABLE Products (
	productID INT PRIMARY KEY IDENTITY NOT NULL,
	name NVARCHAR(255) NOT NULL,
	price INT NOT NULL DEFAULT '0',
	categoryID VARCHAR(255) REFERENCES dbo.Category(categoryID),
	description text,
	pic VARBINARY(MAX) ,
	quantity integer NOT NULL DEFAULT '1',
	viewed INTEGER DEFAULT 0

)
GO
ALTER TABLE Products
  ADD rate FLOAT; go

SELECT * FROM dbo.Products
GO
EXEC dbo.updatePro @id = 0,           -- int
                   @name = N'',       -- nvarchar(255)
                   @price = 0.0,      -- float
                   @categoryID = 0,   -- int
                   @description = '', -- text
                   @pic = NULL,       -- varbinary(max)
                   @quantity = 0,     -- int
                   @viewed = 0        -- int

---------------------------------------------------------------------------------------------
CREATE PROC updatePro @id INT, @name NVARCHAR(255), @price int, @categoryID VARCHAR(255), @description TEXT, @pic VARBINARY(MAX), @quantity INTEGER, @viewed INTEGER, @rate float
AS
BEGIN
	IF (DATALENGTH(@pic)!=0)
	BEGIN
		UPDATE dbo.Products SET name=@name, price=@price, categoryID=@categoryID, description=@description, pic=@pic, quantity=@quantity, viewed=@viewed, rate=@rate WHERE productID=@id
	END
	ELSE
	BEGIN
		UPDATE dbo.Products SET name=@name, price=@price, categoryID=@categoryID, description=@description, quantity=@quantity, viewed=@viewed, rate=@rate WHERE productID=@id
	END
END
GO
CREATE PROC getProByID @id INT
AS
BEGIN
    SELECT *
	FROM dbo.Products WHERE productID=@id
END
GO

ALTER PROC us_searchProFilter @proName NVARCHAR(MAX),@rate FLOAT, @min INT, @max INT  
AS
BEGIN
	IF (ISNULL(@rate, 0) != 0 and ISNULL(@min, 0) != 0)
		SELECT * FROM dbo.Products WHERE dbo.GetUnsignString(name) LIKE N'%' + dbo.GetUnsignString(@proName) + '%' AND rate>=@rate AND price BETWEEN @min AND @max
	ELSE IF(ISNULL(@min, 0) = 0 AND ISNULL(@rate, 0) != 0 )
			SELECT * FROM dbo.Products WHERE dbo.GetUnsignString(name) LIKE N'%' + dbo.GetUnsignString(@proName) + '%' AND rate>=@rate
	ELSE IF (ISNULL(@rate, 0) = 0 AND ISNULL(@min, 0) != 0)
    		SELECT * FROM dbo.Products WHERE dbo.GetUnsignString(name) LIKE N'%' + dbo.GetUnsignString(@proName) + '%' AND price BETWEEN @min AND @max
	ELSE
		SELECT * FROM dbo.Products WHERE dbo.GetUnsignString(name) LIKE N'%' + dbo.GetUnsignString(@proName) + '%' 
END 
GO
EXEC dbo.us_searchProFilter @proName = N'sp', -- nvarchar(max)
                            @rate = 4,    -- float
                            @min = 0,       -- int
                            @max = 0        -- int
 @proName=N'sp', @rate=4, @min=1000, @max=500000
-------------------------------------------------------------------------------------------------
CREATE TABLE Users(
	username VARCHAR(25) PRIMARY KEY NOT NULL,
	email VARCHAR(255) NOT NULL,
	password varchar(20) NOT NULL,
	fullname NVARCHAR(255) NOT NULL,
	address VARCHAR(255),
	phone varchar(50),
	coins integer NOT NULL DEFAULT 0,
	role integer NOT NULL DEFAULT 0
)
GO

SELECT * from (SELECT ROW_NUMBER() OVER (ORDER BY coins) AS r, *FROM dbo.Users) AS sub  WHERE sub.r between (2-1)*3+1 AND 2*3
go

INSERT INTO dbo.Users
(
    username,
	email,
    password,
    fullname,
    address,
    phone,
    role
)
VALUES
(   'thanh141121',   -- userID - varchar(20)
	'abc@gmail.com',
    '141121',   -- password - varchar(20)
    N'Thanh Trung Trần',  -- fullname - nvarchar(255)
    'dong nai',   -- address - varchar
    '0338989824',   -- phone - varchar
    1  -- role - integer
    );

INSERT INTO dbo.Users
(
    username,
	email,
    password,
    fullname,
    address,
    phone,
    role
)
VALUES
(   'thanh1411',   -- userID - varchar(20)
	'nhanvien@gmail.com',
    '141121',   -- password - varchar(20)
    N'Thanh Trung Trần',  -- fullname - nvarchar(255)
    'dong nai',   -- address - varchar
    '0338989824',   -- phone - varchar
    0  -- role - integer
    );


GO

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE TABLE Cart (
	cartID INT PRIMARY KEY IDENTITY,
	username VARCHAR(25) NOT NULL REFERENCES Users(username),
	total int DEFAULT 0
)
GO
	--FOREIGN KEY(cartID) REFERENCES Cart(cartID),
CREATE TABLE DetailCart (
	--username VARCHAR(25) NOT NULL REFERENCES Users(username),
	cartID INT REFERENCES dbo.Cart(cartID),
	productID integer NOT NULL,
	quantity integer NOT NULL DEFAULT 1,
	FOREIGN KEY(productID) REFERENCES dbo.Products(productID),
	status INT DEFAULT 0

)
GO
CREATE PROC us_changeStatus @cartID INT, @proID INT, @status int
AS
BEGIN
   UPDATE dbo.DetailCart SET status=@status WHERE  productID=@proID AND cartID=@cartID 
END
GO
                            
CREATE PROC us_addtoDetailCart @proID INT, @amount INT, @cartID int
AS
BEGIN
	DECLARE @isExistPro INT;
	SELECT @isExistPro = productID
	FROM dbo.DetailCart WHERE productID=@proID AND cartID=@cartID
	IF (@isExistPro IS NOT NULL)
		UPDATE dbo.DetailCart SET quantity=quantity+@amount WHERE productID=@proID AND cartID=@cartID
	ELSE
	INSERT dbo.DetailCart
	(
	    cartID,
	    productID,
	    quantity,
	    status
	)
	VALUES
	(   @cartID, -- userID - varchar(20)
	    @proID,  -- productID - int
	    @amount,  -- quantity - int
	    0   -- status - int
	    )

END
GO


CREATE TRIGGER us_afterEditCartDetail ON dbo.DetailCart AFTER INSERT,UPDATE
AS
BEGIN
    DECLARE @total INT
	DECLARE @cartID int
	SELECT @cartID=i.cartID FROM Inserted AS i
	SELECT @total=ISNULL(SUM(total), 0) 
	FROM (SELECT dtc.quantity*pr.price AS total FROM dbo.DetailCart AS dtC, dbo.Products AS pr WHERE cartID=@cartID AND dtC.productID = pr.productID AND status=1) AS br
	UPDATE dbo.Cart SET total=@total WHERE cartID=@cartID

END
GO
CREATE TRIGGER us_afterDelCartDetail ON dbo.DetailCart FOR DELETE
AS 
BEGIN
    DECLARE @total INT
	DECLARE @cartID int
	SELECT @cartID=i.cartID FROM Deleted AS i
	SELECT @total=ISNULL(SUM(total), 0) 
	FROM (SELECT dtc.quantity*pr.price AS total FROM dbo.DetailCart AS dtC, dbo.Products AS pr WHERE cartID=@cartID AND dtC.productID = pr.productID AND status=1) AS br
	UPDATE dbo.Cart SET total=@total WHERE cartID=@cartID

END
GO

CREATE FUNCTION getTotalPriceItem (@proID INT, @cartID INT)
RETURNS int 
AS BEGIN

	DECLARE @total int
    SELECT @total=dtC.quantity*pr.price 
	FROM dbo.DetailCart AS dtC, dbo.Products AS pr
	WHERE dtC.productID=pr.productID AND dtC.cartID=@cartID AND dtC.productID=@proID
	RETURN @total
	END
GO
SELECT dbo.getTotalPriceItem(3,2) AS bro GO
SELECT * FROM dbo.Users go
SELECT * FROM dbo.DetailCart go 
SELECT * FROM dbo.Cart go
SELECT ISNULL(SUM(total), 0)  FROM dbo.Bill go
SELECT CONVERT(varchar,date,113) as [DD MMM YYYY HH:MM:SS:MMM] FROM dbo.Bill go
SELECT CONVERT(varchar,date,113) AS date FROM dbo.Bill go
SELECT CONVERT(varchar,date,0) AS date FROM dbo.Bill go

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE TABLE Discount (
	discountID varchar PRIMARY KEY,
	quantity integer NOT NULL DEFAULT '1',
	desDiscount varchar NOT NULL,

)
GO
CREATE TABLE Bill (
	billID integer PRIMARY KEY IDENTITY,
	username VARCHAR(25) NOT NULL REFERENCES Users(username),
	total int NOT NULL DEFAULT 0,
	discountID VARCHAR REFERENCES Discount(discountID),
	date datetime DEFAULT GETDATE(),
	status integer NOT NULL DEFAULT '0' --0:cho xac nhan ; 1: dang giao; 2: da nhan hang; 3: da danh gia
)
GO
CREATE TABLE DetailBill (
	billID integer NOT NULL REFERENCES Bill(billID),
	productID integer NOT NULL REFERENCES Products(productID) ,
	quantity integer NOT NULL DEFAULT 1
)
GO

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE TABLE review (
	id INT PRIMARY KEY IDENTITY,
	productID INT REFERENCES dbo.Products(productID),
	userID VARCHAR(25) REFERENCES dbo.Users(username),
	rating FLOAT DEFAULT 0,
	review TEXT,
)
GO
------------------------------------------------------
--ALTER TABLE Products WITH CHECK ADD CONSTRAINT Products_fk0 FOREIGN KEY (categoryID) REFERENCES Category(categoryID)
--GO

-----------------------------------------------------------store proc--------------------------------------------------------


---------------------------------------------------trigger for user----------------------------------------------------------
CREATE TRIGGER ad_afterCreUs ON dbo.Users AFTER INSERT
AS BEGIN
		DECLARE @username VARCHAR(25)
		SELECT @username=i.username FROM Inserted AS i
       INSERT dbo.Cart
       (
           username
       )
       VALUES
       (   @username
           )
   END
GO

-----------------------------------------------------------------function--------------------------------------------------------
CREATE FUNCTION [dbo].[GetUnsignString](@strInput NVARCHAR(4000)) 
RETURNS NVARCHAR(4000)
AS
BEGIN     
    IF @strInput IS NULL RETURN @strInput
    IF @strInput = '' RETURN @strInput
    DECLARE @RT NVARCHAR(4000)
    DECLARE @SIGN_CHARS NCHAR(136)
    DECLARE @UNSIGN_CHARS NCHAR (136)

    SET @SIGN_CHARS       = N'ăâđêôơưàảãạáằẳẵặắầẩẫậấèẻẽẹéềểễệếìỉĩịíòỏõọóồổỗộốờởỡợớùủũụúừửữựứỳỷỹỵýĂÂĐÊÔƠƯÀẢÃẠÁẰẲẴẶẮẦẨẪẬẤÈẺẼẸÉỀỂỄỆẾÌỈĨỊÍÒỎÕỌÓỒỔỖỘỐỜỞỠỢỚÙỦŨỤÚỪỬỮỰỨỲỶỸỴÝ'+NCHAR(272)+ NCHAR(208)
    SET @UNSIGN_CHARS = N'aadeoouaaaaaaaaaaaaaaaeeeeeeeeeeiiiiiooooooooooooooouuuuuuuuuuyyyyyAADEOOUAAAAAAAAAAAAAAAEEEEEEEEEEIIIIIOOOOOOOOOOOOOOOUUUUUUUUUUYYYYYDD'

    DECLARE @COUNTER INT
    DECLARE @COUNTER1 INT
    SET @COUNTER = 1
 
    WHILE (@COUNTER <=LEN(@strInput))
    BEGIN   
      SET @COUNTER1 = 1
      --Tim trong chuoi mau
       WHILE (@COUNTER1 <=LEN(@SIGN_CHARS)+1)
       BEGIN
     IF UNICODE(SUBSTRING(@SIGN_CHARS, @COUNTER1,1)) = UNICODE(SUBSTRING(@strInput,@COUNTER ,1) )
     BEGIN           
          IF @COUNTER=1
              SET @strInput = SUBSTRING(@UNSIGN_CHARS, @COUNTER1,1) + SUBSTRING(@strInput, @COUNTER+1,LEN(@strInput)-1)                   
          ELSE
              SET @strInput = SUBSTRING(@strInput, 1, @COUNTER-1) +SUBSTRING(@UNSIGN_CHARS, @COUNTER1,1) + SUBSTRING(@strInput, @COUNTER+1,LEN(@strInput)- @COUNTER)    
              BREAK         
               END
             SET @COUNTER1 = @COUNTER1 +1
       END
      --Tim tiep
       SET @COUNTER = @COUNTER +1
    END
    RETURN @strInput
END
GOa